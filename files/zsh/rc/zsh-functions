function who_am_i {
    # this function shows who I am and where I'm sitting now
    # %n is $USERNAME variable. %m is The hostname up to the first ‘.’
    echo "%{$fg[magenta]%}%n%{$reset_color%} %{$fg[white]%}at%{$reset_color%} %{$fg[yellow]%}%m%{$reset_color%}"
}

function happy_sad {
    # next line is just ternary operator in zsh. It shows ^_^ if last command was true
    # and o_O if it was false
    echo "%(?.%{$fg[green]%}^_^%{$reset_color%}.%{$fg[red]%}o_O%{$reset_color%})"
}

function red_green {
    # The same as for happy_sad but for '>' prompt
    echo "%(?.%{$fg[green]%}>%{$reset_color%}.%{$fg[red]%}>%{$reset_color%})"
}

function pyvenv {
    # find current git branch
    local ret="$(echo $PYENV_VERSION)"
    # and test that it is not null. If not null - then print it.
    [ $PYENV_VERSION ] && echo "%{$reset_color%}[%{$fg[blue]%}$PYENV_VERSION%{$reset_color%}]"
}

#### SSH-related funcs ####
# Check if ssh-agent is running. In case it isn't, create temp directory,
# run ssh-agent and put ssh-agent socket info to the file in this directory.
# It allows us to run ssh-agent for the first time we got a shell. Then check
# for exported ssh-agent socket info. If it is not exported (like when you
# opened second shell), get the data from file with previously written socket
# info.
ensure-ssh-keys() {
  SSH_INFO_DIR="/tmp/$USER/.ssh_data"
  SSH_AGENT_FILE="${SSH_INFO_DIR}/ssh_agent_last_data"

  if [[ ! -f ${SSH_AGENT_FILE} ]]; then
    # In case there is no ssh-agent socket file, it means we can freely kill
    # all ssh-agent instances, run new one and then export its data to such
    # a file
    if [ "${PLATFORM}" != "Darwin" ]; then
      CHMOD_CMD='chmod'
    else
      CHMOD_CMD='gchmod'
    fi
    killall ssh-agent
    echo "ssh-agent not running, prepare to run it"
    echo "ensure ssh-agent data directory"
    mkdir -p ${SSH_INFO_DIR}
    $CHMOD_CMD 700 ${SSH_INFO_DIR}
    echo "run ssh-agent"
    ssh-agent > ${SSH_AGENT_FILE}
    $CHMOD_CMD 600 ${SSH_AGENT_FILE}
    echo "successfully ran ssh-agent"
  fi

  # There are cases when you have ssh-agent file but still do not have socket
  # info exported (for example, when you opening second shell)
  if [[ ! "$SSH_AUTH_SOCK" ]]; then
    echo "ssh auth sock info not exported, trying to export"
    eval "$(<${SSH_AGENT_FILE})"
    echo "ssh-agent sock info exported to ENV variables"
  fi

  # If there is no keys in ssh-add, just add them - we always have some :)
  if ! ssh-add -l >/dev/null; then
    ssh-add -t 14h
    echo "Keys were added to an agent for 14 hours"
  fi
}

ssh() {
  ensure-ssh-keys
  if [[ $# -ge 1 ]]; then
    /usr/bin/ssh $@
  else
    filter=${1:-"."}
    target=$(egrep -o "Host (\b.+\b)" $HOME/.ssh/config | awk '{print $2}' | grep $filter | fzf -e --preview 'shost {}')
    if [[ -n $target ]]; then
      echo "Remoting into: $target"
      ssh $target
    fi
  fi
}

rsync() {
  ensure-ssh-keys
  /usr/bin/rsync $@
}

# Deprecated
get-ssh-hostname() {
  local ssh_host=''
  if [[ $# == 1 ]]; then
    ssh_host="$@"
  else
    ssh_host=$(echo "$@" | perl -ne 'print if s/.*\s(.*?@.*?)\s.*/\1/')
  fi
  # Try one more time
  if [[ "$ssh_host" == "" ]]; then
    ssh_host=$(echo "$@" | perl -ne 'print if s/.*\s([^-].*?)\s.*/\1/')
  fi
  echo "${ssh_host}"
}

# Deprecated
ssh-old() {
  check-ssh-agent
  check-ssh-add
  local W_NAME=$(tmux display-message -p '#W')
  local SSH_HOST=$(get-ssh-hostname $@)
  tmux rename-window "ssh:$SSH_HOST"
  /usr/bin/ssh $@
  tmux rename-window $W_NAME
}

# Deprecated
tb() {
  if [[ $# != 1 ]]; then
    echo "Run as 'tb <connection-name>'"
    return 0
  fi
  osascript -e "tell application \"/Applications/Tunnelblick.app\"" -e "connect \"$1\"" -e "end tell"
}
